@using System
@inject HttpClient http

@page "/"

<h1>Lista de Tarefas</h1>

@if(tarefas == null){
    <p>Carregando...</p>
} else if(!tarefas.Any()){
    <p>Nenhuma tarefa disponível!</p>
} else{
    <table class = "table">
        <thead>
            <tr>
                <th>Ação</th>
                <th>Descrição</th>
                <th>Data de Criação</th>
                <th>Concluída</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach(var tarefa in tarefas){
                <tr>
                    <th><button @onclick= "@(() => deletarTarefa(@tarefa.id))"> <i class="oi oi-trash"></i> </button></th>
                    <th>@tarefa.descricao</th>
                    <th>@tarefa.dataCriacao</th>
                    <th><input type="checkbox" @bind="@tarefa.concluida"> @tarefa.concluida</th>
                </tr>
            }
        </tbody>
    </table>
    <input @bind="novaTarefa" placeholder="Nova Tarefa">
    <button class="btn btn-primary" @onclick="AdicionarTarefa">Adicionar</button>
}


@code{

    protected override async Task OnInitializedAsync(){
        tarefas = await http.GetFromJsonAsync<List<Tarefa>>("dados/tarefas.json");

    }
    public class Tarefa{
        public Guid id { get; set;}
        public string descricao { get; set;}
        public bool concluida { get; set;}
        public DateTime dataCriacao { get; set; }
    }
    List<Tarefa> tarefas = new List<Tarefa>();

    string novaTarefa = "";

    public void AdicionarTarefa(){
        if(!string.IsNullOrEmpty(novaTarefa)){
            Tarefa tarefaNova = new Tarefa();
            tarefaNova.id = Guid.NewGuid();
            tarefaNova.descricao = novaTarefa;
            tarefaNova.dataCriacao = DateTime.Now;

            tarefas.Add(tarefaNova);
            
            novaTarefa = "";
        }
    }

    public void deletarTarefa(Guid id){

        tarefas.Remove(tarefas.First(x => x.id == id));
    }
    

}